/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package pruebasets;


import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author Chema
 */
public class QuineForm extends javax.swing.JFrame {

    /**
     * Creates new form QuineForm
     */
    public QuineForm() {
        initComponents();
        this.solucion1Label.setVisible(false);
        this.solucion2Label.setVisible(false);
        this.solucion3Label.setVisible(false);
        this.solucion4Label.setVisible(false);
        this.solucion5Label.setVisible(false);
        this.funcion1MFPanel.setVisible(false);
        this.funcion2MFPanel.setVisible(false);
        this.funcion3MFPanel.setVisible(false);
        this.funcion4MFPanel.setVisible(false);
        this.funcion5MFPanel.setVisible(false);
        this.funcion6MFPanel.setVisible(false);
        
        this.solucion1MFPanel.setVisible(false);
        this.solucion2MFPanel.setVisible(false);
        this.solucion3MFPanel.setVisible(false);
        
        //Invisibles todas las etiquetas soluciones de la Solución 1
        this.solucion1F1Label.setVisible(false);
        this.solucion1F2Label.setVisible(false);
        this.solucion1F3Label.setVisible(false);
        this.solucion1F4Label.setVisible(false);
        this.solucion1F5Label.setVisible(false);
        this.solucion1F6Label.setVisible(false);
        
        //Invisibles todas las etiquetas soluciones de la Solución 2
        this.solucion2F1Label.setVisible(false);
        this.solucion2F2Label.setVisible(false);
        this.solucion2F3Label.setVisible(false);
        this.solucion2F4Label.setVisible(false);
        this.solucion2F5Label.setVisible(false);
        this.solucion2F6Label.setVisible(false);
        
        //Invisibles todas las etiquetas soluciones de la Solución 2
        this.solucion3F1Label.setVisible(false);
        this.solucion3F2Label.setVisible(false);
        this.solucion3F3Label.setVisible(false);
        this.solucion3F4Label.setVisible(false);
        this.solucion3F5Label.setVisible(false);
        this.solucion3F6Label.setVisible(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        AnadirMiniterimoImportaButton = new javax.swing.JButton();
        miniterminoImportaText = new javax.swing.JTextField();
        miniterminosNoImportaLabel = new javax.swing.JLabel();
        miniterminoNoImportaText = new javax.swing.JTextField();
        miniterminosImportaLabel = new javax.swing.JLabel();
        AnadirMiniterminoNoImportaButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        simplificarFuncionButton = new javax.swing.JButton();
        borrarFuncionButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        NumVariablesComboBox = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        solucion1Label = new javax.swing.JLabel();
        solucion2Label = new javax.swing.JLabel();
        solucion3Label = new javax.swing.JLabel();
        solucion4Label = new javax.swing.JLabel();
        solucion5Label = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        funcion1MFPanel = new javax.swing.JPanel();
        funcion1MFLabelSi = new javax.swing.JLabel();
        funcion1MFLabelNo = new javax.swing.JLabel();
        miniterminosImporta1Label = new javax.swing.JLabel();
        miniterminosNoImporta1Label = new javax.swing.JLabel();
        miniterminoImporta1Text = new javax.swing.JTextField();
        AnadirMiniterminoImporta1Button = new javax.swing.JButton();
        miniterminoNoImporta1Text = new javax.swing.JTextField();
        AnadirMiniterminoNoImporta1Button = new javax.swing.JButton();
        funcion2MFPanel = new javax.swing.JPanel();
        funcion2MFLabelSi = new javax.swing.JLabel();
        miniterminosImporta2Label = new javax.swing.JLabel();
        funcion2MFLabelNo = new javax.swing.JLabel();
        miniterminosNoImporta2Label = new javax.swing.JLabel();
        miniterminoImporta2Text = new javax.swing.JTextField();
        AnadirMiniterminoImporta2Button = new javax.swing.JButton();
        miniterminoNoImporta2Text = new javax.swing.JTextField();
        AnadirMiniterminoNoImporta2Button = new javax.swing.JButton();
        funcion3MFPanel = new javax.swing.JPanel();
        funcion3MFLabelSi = new javax.swing.JLabel();
        miniterminosImporta3Label = new javax.swing.JLabel();
        funcion3MFLabelNo = new javax.swing.JLabel();
        miniterminosNoImporta3Label = new javax.swing.JLabel();
        miniterminoImporta3Text = new javax.swing.JTextField();
        AnadirMiniterminoImporta3Button = new javax.swing.JButton();
        miniterminoNoImporta3Text = new javax.swing.JTextField();
        AnadirMiniterminoNoImporta3Button = new javax.swing.JButton();
        numFuncionesMFComboBox = new javax.swing.JComboBox();
        numVariablesMFComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        funcion4MFPanel = new javax.swing.JPanel();
        funcion4MFLabelSi = new javax.swing.JLabel();
        miniterminosImporta4Label = new javax.swing.JLabel();
        funcion4MFLabelNo = new javax.swing.JLabel();
        miniterminosNoImporta4Label = new javax.swing.JLabel();
        miniterminoImporta4Text = new javax.swing.JTextField();
        AnadirMiniterminoImporta4Button = new javax.swing.JButton();
        miniterminoNoImporta4Text = new javax.swing.JTextField();
        AnadirMiniterminoNoImporta4Button = new javax.swing.JButton();
        funcion5MFPanel = new javax.swing.JPanel();
        funcion5MFLabelSi = new javax.swing.JLabel();
        miniterminosImporta5Label = new javax.swing.JLabel();
        funcion5MFLabelNo = new javax.swing.JLabel();
        miniterminosNoImporta5Label = new javax.swing.JLabel();
        miniterminoImporta5Text = new javax.swing.JTextField();
        AnadirMiniterminoImporta5Button = new javax.swing.JButton();
        miniterminoNoImporta5Text = new javax.swing.JTextField();
        AnadirMiniterminoNoImporta5Button = new javax.swing.JButton();
        funcion6MFPanel = new javax.swing.JPanel();
        funcion6MFLabelSi = new javax.swing.JLabel();
        miniterminosImporta6Label = new javax.swing.JLabel();
        funcion6MFLabelNo = new javax.swing.JLabel();
        miniterminosNoImporta6Label = new javax.swing.JLabel();
        miniterminoImporta6Text = new javax.swing.JTextField();
        AnadirMiniterminoImporta6Button = new javax.swing.JButton();
        miniterminoNoImporta6Text = new javax.swing.JTextField();
        AnadirMiniterminoNoImporta6Button = new javax.swing.JButton();
        simplificarMFButton = new javax.swing.JButton();
        borrarMFButton = new javax.swing.JButton();
        solucion1MFPanel = new javax.swing.JPanel();
        solucion1F1Label = new javax.swing.JLabel();
        solucion1F2Label = new javax.swing.JLabel();
        solucion1F3Label = new javax.swing.JLabel();
        solucion1F4Label = new javax.swing.JLabel();
        solucion1F5Label = new javax.swing.JLabel();
        solucion1F6Label = new javax.swing.JLabel();
        solucion2MFPanel = new javax.swing.JPanel();
        solucion2F1Label = new javax.swing.JLabel();
        solucion2F2Label = new javax.swing.JLabel();
        solucion2F3Label = new javax.swing.JLabel();
        solucion2F4Label = new javax.swing.JLabel();
        solucion2F5Label = new javax.swing.JLabel();
        solucion2F6Label = new javax.swing.JLabel();
        solucion3MFPanel = new javax.swing.JPanel();
        solucion3F1Label = new javax.swing.JLabel();
        solucion3F2Label = new javax.swing.JLabel();
        solucion3F3Label = new javax.swing.JLabel();
        solucion3F4Label = new javax.swing.JLabel();
        solucion3F5Label = new javax.swing.JLabel();
        solucion3F6Label = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Software Quine-McCluskey");

        AnadirMiniterimoImportaButton.setText("Añadir");
        AnadirMiniterimoImportaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnadirMiniterimoImportaButtonActionPerformed(evt);
            }
        });

        miniterminosNoImportaLabel.setText("jLabel4");

        miniterminosImportaLabel.setText("jLabel2");

        AnadirMiniterminoNoImportaButton.setText("Añadir");
        AnadirMiniterminoNoImportaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnadirMiniterminoNoImportaButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("+d");

        simplificarFuncionButton.setText("Simplificar Función");
        simplificarFuncionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simplificarFuncionButtonActionPerformed(evt);
            }
        });

        borrarFuncionButton.setText("Borrar Función");
        borrarFuncionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarFuncionButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("F(a,b,c,d) =");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Soluciones simplificadas:");

        NumVariablesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        NumVariablesComboBox.setSelectedIndex(-1);
        NumVariablesComboBox.setToolTipText("Introduzca el número de variables de la función a simplificar");
        NumVariablesComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                NumVariablesComboBoxItemStateChanged(evt);
            }
        });

        jLabel6.setText("Número de variables:");

        solucion1Label.setText("Solución 1");

        solucion2Label.setText("Solución 2");

        solucion3Label.setText("Solución 3");

        solucion4Label.setText("Solución 4");

        solucion5Label.setText("Solución 5");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(198, 198, 198)
                .addComponent(jLabel5)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(solucion5Label)
                            .addComponent(solucion4Label)
                            .addComponent(solucion3Label)
                            .addComponent(solucion2Label)
                            .addComponent(solucion1Label)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(172, 172, 172)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NumVariablesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(simplificarFuncionButton)
                                .addGap(48, 48, 48))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(miniterminoImportaText, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AnadirMiniterimoImportaButton)
                                .addGap(82, 82, 82))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(miniterminosImportaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(miniterminoNoImportaText, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(AnadirMiniterminoNoImportaButton))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(miniterminosNoImportaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(borrarFuncionButton))))
                .addContainerGap(511, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(NumVariablesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(miniterminosImportaLabel)
                    .addComponent(jLabel3)
                    .addComponent(miniterminosNoImportaLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(miniterminoImportaText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(AnadirMiniterimoImportaButton))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(miniterminoNoImportaText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(AnadirMiniterminoNoImportaButton)))
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(simplificarFuncionButton)
                    .addComponent(borrarFuncionButton))
                .addGap(32, 32, 32)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(solucion1Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solucion2Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solucion3Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solucion4Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solucion5Label)
                .addContainerGap(297, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Una función", jPanel1);

        funcion1MFPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Función 1"));

        funcion1MFLabelSi.setText("F(a,b,c,d,...) =");
        funcion1MFLabelSi.setToolTipText("");

        funcion1MFLabelNo.setText("+d");

        miniterminosImporta1Label.setText("jLabel2");

        miniterminosNoImporta1Label.setText("jLabel4");

        AnadirMiniterminoImporta1Button.setText("Añadir");
        AnadirMiniterminoImporta1Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnadirMiniterminoImporta1ButtonActionPerformed(evt);
            }
        });

        AnadirMiniterminoNoImporta1Button.setText("Añadir");
        AnadirMiniterminoNoImporta1Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnadirMiniterminoNoImporta1ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout funcion1MFPanelLayout = new javax.swing.GroupLayout(funcion1MFPanel);
        funcion1MFPanel.setLayout(funcion1MFPanelLayout);
        funcion1MFPanelLayout.setHorizontalGroup(
            funcion1MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(funcion1MFPanelLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(funcion1MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(funcion1MFPanelLayout.createSequentialGroup()
                        .addComponent(miniterminoImporta1Text, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AnadirMiniterminoImporta1Button))
                    .addGroup(funcion1MFPanelLayout.createSequentialGroup()
                        .addComponent(funcion1MFLabelSi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(miniterminosImporta1Label)))
                .addGap(81, 81, 81)
                .addGroup(funcion1MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(funcion1MFPanelLayout.createSequentialGroup()
                        .addComponent(funcion1MFLabelNo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(miniterminosNoImporta1Label))
                    .addGroup(funcion1MFPanelLayout.createSequentialGroup()
                        .addComponent(miniterminoNoImporta1Text, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AnadirMiniterminoNoImporta1Button)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        funcion1MFPanelLayout.setVerticalGroup(
            funcion1MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(funcion1MFPanelLayout.createSequentialGroup()
                .addGroup(funcion1MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(funcion1MFLabelSi)
                    .addComponent(miniterminosImporta1Label)
                    .addComponent(funcion1MFLabelNo)
                    .addComponent(miniterminosNoImporta1Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(funcion1MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(miniterminoImporta1Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AnadirMiniterminoImporta1Button)
                    .addComponent(miniterminoNoImporta1Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AnadirMiniterminoNoImporta1Button))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        funcion2MFPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Función 2"));

        funcion2MFLabelSi.setText("F(a,b,c,d,...) =");

        miniterminosImporta2Label.setText("jLabel8");

        funcion2MFLabelNo.setText("+d");

        miniterminosNoImporta2Label.setText("jLabel10");

        AnadirMiniterminoImporta2Button.setText("Añadir");
        AnadirMiniterminoImporta2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnadirMiniterminoImporta2ButtonActionPerformed(evt);
            }
        });

        AnadirMiniterminoNoImporta2Button.setText("Añadir");
        AnadirMiniterminoNoImporta2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnadirMiniterminoNoImporta2ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout funcion2MFPanelLayout = new javax.swing.GroupLayout(funcion2MFPanel);
        funcion2MFPanel.setLayout(funcion2MFPanelLayout);
        funcion2MFPanelLayout.setHorizontalGroup(
            funcion2MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(funcion2MFPanelLayout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(funcion2MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(funcion2MFPanelLayout.createSequentialGroup()
                        .addComponent(funcion2MFLabelSi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(miniterminosImporta2Label))
                    .addGroup(funcion2MFPanelLayout.createSequentialGroup()
                        .addComponent(miniterminoImporta2Text, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AnadirMiniterminoImporta2Button)))
                .addGap(83, 83, 83)
                .addGroup(funcion2MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(funcion2MFPanelLayout.createSequentialGroup()
                        .addComponent(funcion2MFLabelNo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(miniterminosNoImporta2Label))
                    .addGroup(funcion2MFPanelLayout.createSequentialGroup()
                        .addComponent(miniterminoNoImporta2Text, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AnadirMiniterminoNoImporta2Button)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        funcion2MFPanelLayout.setVerticalGroup(
            funcion2MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(funcion2MFPanelLayout.createSequentialGroup()
                .addGroup(funcion2MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(funcion2MFLabelSi)
                    .addComponent(miniterminosImporta2Label)
                    .addComponent(funcion2MFLabelNo)
                    .addComponent(miniterminosNoImporta2Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(funcion2MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(miniterminoImporta2Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AnadirMiniterminoImporta2Button)
                    .addComponent(miniterminoNoImporta2Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AnadirMiniterminoNoImporta2Button))
                .addGap(0, 17, Short.MAX_VALUE))
        );

        funcion3MFPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Función 3"));

        funcion3MFLabelSi.setText("F(a,b,c,d,...) =");

        miniterminosImporta3Label.setText("jLabel8");

        funcion3MFLabelNo.setText("+d");

        miniterminosNoImporta3Label.setText("jLabel10");

        AnadirMiniterminoImporta3Button.setText("Añadir");
        AnadirMiniterminoImporta3Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnadirMiniterminoImporta3ButtonActionPerformed(evt);
            }
        });

        AnadirMiniterminoNoImporta3Button.setText("Añadir");
        AnadirMiniterminoNoImporta3Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnadirMiniterminoNoImporta3ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout funcion3MFPanelLayout = new javax.swing.GroupLayout(funcion3MFPanel);
        funcion3MFPanel.setLayout(funcion3MFPanelLayout);
        funcion3MFPanelLayout.setHorizontalGroup(
            funcion3MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(funcion3MFPanelLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(funcion3MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(funcion3MFPanelLayout.createSequentialGroup()
                        .addComponent(funcion3MFLabelSi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(miniterminosImporta3Label))
                    .addGroup(funcion3MFPanelLayout.createSequentialGroup()
                        .addComponent(miniterminoImporta3Text, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AnadirMiniterminoImporta3Button)))
                .addGap(86, 86, 86)
                .addGroup(funcion3MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(funcion3MFPanelLayout.createSequentialGroup()
                        .addComponent(miniterminoNoImporta3Text, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AnadirMiniterminoNoImporta3Button))
                    .addGroup(funcion3MFPanelLayout.createSequentialGroup()
                        .addComponent(funcion3MFLabelNo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(miniterminosNoImporta3Label)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        funcion3MFPanelLayout.setVerticalGroup(
            funcion3MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(funcion3MFPanelLayout.createSequentialGroup()
                .addGroup(funcion3MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(funcion3MFLabelSi)
                    .addComponent(miniterminosImporta3Label)
                    .addComponent(funcion3MFLabelNo)
                    .addComponent(miniterminosNoImporta3Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(funcion3MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(miniterminoImporta3Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AnadirMiniterminoImporta3Button)
                    .addComponent(miniterminoNoImporta3Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AnadirMiniterminoNoImporta3Button))
                .addGap(0, 17, Short.MAX_VALUE))
        );

        numFuncionesMFComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2", "3", "4", "5", "6" }));
        numFuncionesMFComboBox.setSelectedIndex(-1);
        numFuncionesMFComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                numFuncionesMFComboBoxItemStateChanged(evt);
            }
        });

        numVariablesMFComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        numVariablesMFComboBox.setSelectedIndex(-1);
        numVariablesMFComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                numVariablesMFComboBoxItemStateChanged(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel2.setText("Número de funciones");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel4.setText("Número de variables");

        funcion4MFPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Función 4"));

        funcion4MFLabelSi.setText("F(a,b,c,d,...) =");

        miniterminosImporta4Label.setText("jLabel12");

        funcion4MFLabelNo.setText("+d");

        miniterminosNoImporta4Label.setText("jLabel14");

        AnadirMiniterminoImporta4Button.setText("Añadir");
        AnadirMiniterminoImporta4Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnadirMiniterminoImporta4ButtonActionPerformed(evt);
            }
        });

        AnadirMiniterminoNoImporta4Button.setText("Añadir");
        AnadirMiniterminoNoImporta4Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnadirMiniterminoNoImporta4ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout funcion4MFPanelLayout = new javax.swing.GroupLayout(funcion4MFPanel);
        funcion4MFPanel.setLayout(funcion4MFPanelLayout);
        funcion4MFPanelLayout.setHorizontalGroup(
            funcion4MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(funcion4MFPanelLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(funcion4MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(funcion4MFPanelLayout.createSequentialGroup()
                        .addComponent(funcion4MFLabelSi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(miniterminosImporta4Label))
                    .addGroup(funcion4MFPanelLayout.createSequentialGroup()
                        .addComponent(miniterminoImporta4Text, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AnadirMiniterminoImporta4Button)))
                .addGap(80, 80, 80)
                .addGroup(funcion4MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(funcion4MFPanelLayout.createSequentialGroup()
                        .addComponent(funcion4MFLabelNo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(miniterminosNoImporta4Label))
                    .addGroup(funcion4MFPanelLayout.createSequentialGroup()
                        .addComponent(miniterminoNoImporta4Text, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AnadirMiniterminoNoImporta4Button)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        funcion4MFPanelLayout.setVerticalGroup(
            funcion4MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(funcion4MFPanelLayout.createSequentialGroup()
                .addGroup(funcion4MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(funcion4MFLabelSi)
                    .addComponent(miniterminosImporta4Label)
                    .addComponent(funcion4MFLabelNo)
                    .addComponent(miniterminosNoImporta4Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(funcion4MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(miniterminoImporta4Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AnadirMiniterminoImporta4Button)
                    .addComponent(miniterminoNoImporta4Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AnadirMiniterminoNoImporta4Button))
                .addGap(0, 17, Short.MAX_VALUE))
        );

        funcion5MFPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Función 5"));

        funcion5MFLabelSi.setText("F(a,b,c,d...) =");

        miniterminosImporta5Label.setText("jLabel16");

        funcion5MFLabelNo.setText("+d");

        miniterminosNoImporta5Label.setText("jLabel18");

        AnadirMiniterminoImporta5Button.setText("Añadir");
        AnadirMiniterminoImporta5Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnadirMiniterminoImporta5ButtonActionPerformed(evt);
            }
        });

        AnadirMiniterminoNoImporta5Button.setText("Añadir");
        AnadirMiniterminoNoImporta5Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnadirMiniterminoNoImporta5ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout funcion5MFPanelLayout = new javax.swing.GroupLayout(funcion5MFPanel);
        funcion5MFPanel.setLayout(funcion5MFPanelLayout);
        funcion5MFPanelLayout.setHorizontalGroup(
            funcion5MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(funcion5MFPanelLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(funcion5MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(funcion5MFPanelLayout.createSequentialGroup()
                        .addComponent(funcion5MFLabelSi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(miniterminosImporta5Label))
                    .addGroup(funcion5MFPanelLayout.createSequentialGroup()
                        .addComponent(miniterminoImporta5Text, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AnadirMiniterminoImporta5Button)))
                .addGap(84, 84, 84)
                .addGroup(funcion5MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(funcion5MFPanelLayout.createSequentialGroup()
                        .addComponent(funcion5MFLabelNo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(miniterminosNoImporta5Label))
                    .addGroup(funcion5MFPanelLayout.createSequentialGroup()
                        .addComponent(miniterminoNoImporta5Text, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AnadirMiniterminoNoImporta5Button)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        funcion5MFPanelLayout.setVerticalGroup(
            funcion5MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(funcion5MFPanelLayout.createSequentialGroup()
                .addGroup(funcion5MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(funcion5MFLabelSi)
                    .addComponent(miniterminosImporta5Label)
                    .addComponent(funcion5MFLabelNo)
                    .addComponent(miniterminosNoImporta5Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(funcion5MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(miniterminoImporta5Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AnadirMiniterminoImporta5Button)
                    .addComponent(miniterminoNoImporta5Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AnadirMiniterminoNoImporta5Button))
                .addGap(0, 17, Short.MAX_VALUE))
        );

        funcion6MFPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Función 6")));

        funcion6MFLabelSi.setText("F(a,b,c,d,...) =");

        miniterminosImporta6Label.setText("jLabel20");

        funcion6MFLabelNo.setText("+d");

        miniterminosNoImporta6Label.setText("jLabel22");

        AnadirMiniterminoImporta6Button.setText("Añadir");
        AnadirMiniterminoImporta6Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnadirMiniterminoImporta6ButtonActionPerformed(evt);
            }
        });

        AnadirMiniterminoNoImporta6Button.setText("Añadir");
        AnadirMiniterminoNoImporta6Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnadirMiniterminoNoImporta6ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout funcion6MFPanelLayout = new javax.swing.GroupLayout(funcion6MFPanel);
        funcion6MFPanel.setLayout(funcion6MFPanelLayout);
        funcion6MFPanelLayout.setHorizontalGroup(
            funcion6MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(funcion6MFPanelLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(funcion6MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(funcion6MFPanelLayout.createSequentialGroup()
                        .addComponent(funcion6MFLabelSi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(miniterminosImporta6Label))
                    .addGroup(funcion6MFPanelLayout.createSequentialGroup()
                        .addComponent(miniterminoImporta6Text, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AnadirMiniterminoImporta6Button)))
                .addGap(83, 83, 83)
                .addGroup(funcion6MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(funcion6MFPanelLayout.createSequentialGroup()
                        .addComponent(funcion6MFLabelNo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(miniterminosNoImporta6Label))
                    .addGroup(funcion6MFPanelLayout.createSequentialGroup()
                        .addComponent(miniterminoNoImporta6Text, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AnadirMiniterminoNoImporta6Button)))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        funcion6MFPanelLayout.setVerticalGroup(
            funcion6MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(funcion6MFPanelLayout.createSequentialGroup()
                .addGroup(funcion6MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(funcion6MFLabelSi)
                    .addComponent(miniterminosImporta6Label)
                    .addComponent(funcion6MFLabelNo)
                    .addComponent(miniterminosNoImporta6Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(funcion6MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(miniterminoImporta6Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AnadirMiniterminoImporta6Button)
                    .addComponent(miniterminoNoImporta6Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AnadirMiniterminoNoImporta6Button))
                .addGap(0, 17, Short.MAX_VALUE))
        );

        simplificarMFButton.setText("Simplificar Función");
        simplificarMFButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simplificarMFButtonActionPerformed(evt);
            }
        });

        borrarMFButton.setText("Borrar Función");
        borrarMFButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarMFButtonActionPerformed(evt);
            }
        });

        solucion1MFPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 153), 1, true), "Solución 1", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 204)));

        solucion1F1Label.setText("jLabel7");

        solucion1F2Label.setText("jLabel8");

        solucion1F3Label.setText("jLabel9");

        solucion1F4Label.setText("jLabel10");

        solucion1F5Label.setText("jLabel11");

        solucion1F6Label.setText("jLabel12");

        javax.swing.GroupLayout solucion1MFPanelLayout = new javax.swing.GroupLayout(solucion1MFPanel);
        solucion1MFPanel.setLayout(solucion1MFPanelLayout);
        solucion1MFPanelLayout.setHorizontalGroup(
            solucion1MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(solucion1MFPanelLayout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(solucion1MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(solucion1F6Label)
                    .addComponent(solucion1F5Label)
                    .addComponent(solucion1F4Label)
                    .addComponent(solucion1F3Label)
                    .addComponent(solucion1F2Label)
                    .addComponent(solucion1F1Label))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        solucion1MFPanelLayout.setVerticalGroup(
            solucion1MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(solucion1MFPanelLayout.createSequentialGroup()
                .addComponent(solucion1F1Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solucion1F2Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solucion1F3Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solucion1F4Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solucion1F5Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(solucion1F6Label)
                .addContainerGap())
        );

        solucion2MFPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 153), 1, true), "Solución 2", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 204)));

        solucion2F1Label.setText("jLabel13");

        solucion2F2Label.setText("jLabel14");

        solucion2F3Label.setText("jLabel15");

        solucion2F4Label.setText("jLabel16");

        solucion2F5Label.setText("jLabel17");

        solucion2F6Label.setText("jLabel18");

        javax.swing.GroupLayout solucion2MFPanelLayout = new javax.swing.GroupLayout(solucion2MFPanel);
        solucion2MFPanel.setLayout(solucion2MFPanelLayout);
        solucion2MFPanelLayout.setHorizontalGroup(
            solucion2MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(solucion2MFPanelLayout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(solucion2MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(solucion2F6Label)
                    .addComponent(solucion2F5Label)
                    .addComponent(solucion2F4Label)
                    .addComponent(solucion2F3Label)
                    .addComponent(solucion2F2Label)
                    .addComponent(solucion2F1Label))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        solucion2MFPanelLayout.setVerticalGroup(
            solucion2MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(solucion2MFPanelLayout.createSequentialGroup()
                .addComponent(solucion2F1Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solucion2F2Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solucion2F3Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solucion2F4Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solucion2F5Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(solucion2F6Label)
                .addContainerGap())
        );

        solucion3MFPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 153), 1, true), "Solución 3", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 204)));

        solucion3F1Label.setText("jLabel19");

        solucion3F2Label.setText("jLabel20");

        solucion3F3Label.setText("jLabel21");

        solucion3F4Label.setText("jLabel22");

        solucion3F5Label.setText("jLabel23");

        solucion3F6Label.setText("jLabel24");

        javax.swing.GroupLayout solucion3MFPanelLayout = new javax.swing.GroupLayout(solucion3MFPanel);
        solucion3MFPanel.setLayout(solucion3MFPanelLayout);
        solucion3MFPanelLayout.setHorizontalGroup(
            solucion3MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(solucion3MFPanelLayout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addGroup(solucion3MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(solucion3F6Label)
                    .addComponent(solucion3F5Label)
                    .addComponent(solucion3F4Label)
                    .addComponent(solucion3F3Label)
                    .addComponent(solucion3F2Label)
                    .addComponent(solucion3F1Label))
                .addContainerGap(268, Short.MAX_VALUE))
        );
        solucion3MFPanelLayout.setVerticalGroup(
            solucion3MFPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(solucion3MFPanelLayout.createSequentialGroup()
                .addComponent(solucion3F1Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solucion3F2Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solucion3F3Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solucion3F4Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solucion3F5Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solucion3F6Label)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(funcion1MFPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(funcion2MFPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(funcion3MFPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(funcion4MFPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(funcion5MFPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(funcion6MFPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(44, 44, 44)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(solucion2MFPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(solucion1MFPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(solucion3MFPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(numVariablesMFComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(numFuncionesMFComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(simplificarMFButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(borrarMFButton)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(numFuncionesMFComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(numVariablesMFComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(simplificarMFButton)
                            .addComponent(borrarMFButton))))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(funcion1MFPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(funcion2MFPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(funcion3MFPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(funcion4MFPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(funcion5MFPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(funcion6MFPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(solucion1MFPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(solucion2MFPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(solucion3MFPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Multi-Función", jPanel2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 949, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 696, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Ayuda", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NumVariablesComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_NumVariablesComboBoxItemStateChanged
        /*Lo primero que se hace si hay un cambio en el número de variables es borrar la función que se haya insertado
        puesto que los minitérminos insertados hasta ese entonces no tienen la estructura correcta*/
        this.borrarFuncionButton.doClick();
        
        Object elementoSeleccionado = this.NumVariablesComboBox.getSelectedItem(); //Obtenemos el elemento seleccionado del ComboBox
        String elementoSeleccionadoStr = elementoSeleccionado.toString(); //Lo convertimos a String
        int elementoSeleccionadoInt = Integer.parseInt(elementoSeleccionadoStr); //Convertimos a entero
        Miniterminov3.n_variables = (byte) elementoSeleccionadoInt;
        
        if(elementoSeleccionadoInt == 1) {
            this.jLabel1.setText("F(a) =");
        } else if(elementoSeleccionadoInt == 2) {
            this.jLabel1.setText("F(a,b) =");
        } else if(elementoSeleccionadoInt == 3) {
            this.jLabel1.setText("F(a,b,c) =");
        } else if(elementoSeleccionadoInt == 4) {
            this.jLabel1.setText("F(a,b,c,d) =");
        } else {
            this.jLabel1.setText("F(a,b,c,d,...) =");
        }
        
        System.out.println(Miniterminov3.n_variables);
    }//GEN-LAST:event_NumVariablesComboBoxItemStateChanged

    private void borrarFuncionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarFuncionButtonActionPerformed
        //Método que borra la función introducida por el usuario para volver a empezar a introducir minitérminos.
        listaTerminosEntrada.clear();
        miniterminosImportaStr = "";
        this.miniterminosImportaLabel.setText(miniterminosImportaStr);
        miniterminosNoImportaStr = "";
        this.miniterminosNoImportaLabel.setText(miniterminosNoImportaStr);
        
        //Borramos el contenido de las etiquetas soluciones de usos anteriores del programa.
        for (JLabel etiqueta : listaEtiquetas) {
            etiqueta.setText("");
        }
        
    }//GEN-LAST:event_borrarFuncionButtonActionPerformed

    private void simplificarFuncionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simplificarFuncionButtonActionPerformed
        //Cuando el usuario clickee en el botón Simplificar Función, haremos todo el proceso de simplificación a partir de la lista creada listaTerminosImportaU
        Tablav3 formula1 = new Tablav3(listaTerminosEntrada);
        List<List<Miniterminov3>> vector;
        vector = formula1.ordenarTabla();
        formula1.generarListaImplicantesPrimos(vector); //genera listaImplicantesPrimos

        System.out.println("Lista Terminos originales" + formula1.listaTerminos);

        System.out.println("Lista Implicantes primos" + formula1.listaImplicantesPrimos);

        formula1.generarListaImplicantesPrimosEsenciales();

        System.out.println("Lista Terminos Importa" + formula1.listaTerminosImporta);

        System.out.println("Lista Implicantes primos esenciales" + formula1.listaImplicantesPrimosEsenciales);

        System.out.println("Lista Terminos pendientes a cubrir" + formula1.listaMiniterminosPendientesACubrir);

        formula1.generarTablaCobertura();
        System.out.println("ListaFila tabla de cobertura" + formula1.listaFila);
        System.out.println("ListaColumna tabla de cobertura" + formula1.listaColumna);
        System.out.println("Pendientes a Cubrir no ha cambiado" + formula1.listaMiniterminosPendientesACubrir);

        //Prueba//
        System.out.println("prueba");
        System.out.println(Tablav3.listaAImplicaListaB(formula1.listaImplicantesPrimosEsenciales, formula1.listaTerminosImporta)); //Retornar false
        System.out.println(Tablav3.listaAImplicaListaB(formula1.listaImplicantesPrimos, formula1.listaTerminosImporta)); //Retornar true

        //prueba2//
        System.out.println("soluciones");
        System.out.println(formula1.proceso_terminado);

        if (formula1.proceso_terminado == false) { //Si formula1.proceso_terminado == true vectorMejoresSoluciones se actualiza con los IPEsenciales (que son la única solución).

            formula1.generarVectorSoluciones();

            for (List<Miniterminov3> solucion : formula1.vectorSoluciones) {
                System.out.println(solucion);
            }
            //prueba3//
            System.out.println("mejores soluciones");

            formula1.generarVectorMejoresSoluciones();

        }

        //Añadimos las 5 etiquetas a un ArrayList llamado listaEtiquetas
        listaEtiquetas.add(solucion1Label);
        listaEtiquetas.add(solucion2Label);
        listaEtiquetas.add(solucion3Label);
        listaEtiquetas.add(solucion4Label);
        listaEtiquetas.add(solucion5Label);

        int num_etiquetas = formula1.vectorMejoresSoluciones.size(); //Número de etiquetas que tendrán texto
        int i = 0;
        for (List<Miniterminov3> mejorSolucion : formula1.vectorMejoresSoluciones) {
            System.out.println(mejorSolucion);
            String solucionLiteral = Tablav3.convertirSolucionALiteral(mejorSolucion);
            listaEtiquetas.get(i).setText(solucionLiteral);
            listaEtiquetas.get(i).setVisible(true);
            i = i+1;
        }
    }//GEN-LAST:event_simplificarFuncionButtonActionPerformed

    private void AnadirMiniterminoNoImportaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnadirMiniterminoNoImportaButtonActionPerformed
        //Método que crea el minitérminoNoImporta
        int miniterminoNoImporta;
        boolean minitermino_nuevo = false;
        limite = (int) (Math.pow(2,Miniterminov3.n_variables) - 1);
        int limite2 = limite + 1;
        Miniterminov3 minitermino1;

        try { //Excepción para que el usuario introduzca dato correcto (en este caso entero).
            miniterminoNoImporta = Integer.parseInt(this.miniterminoNoImportaText.getText()); //Minitermino entero introducido por el usuario
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un número entero", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            minitermino1 = new Miniterminov3(miniterminoNoImporta, false); //Creamos el objeto minitermino ¡CAMBIAR CON TRUE/FALSE EN FUNCION IMPORTA NO IMPORTA!
            if (listaTerminosEntrada.contains(minitermino1)) {
                JOptionPane.showMessageDialog(this, "El minitérmino " + miniterminoNoImporta + " ya está incluído en la función");
            } else {
                listaTerminosEntrada.add(minitermino1);
                minitermino_nuevo = true;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un minitérmino inferior a " + limite2 + " o aumente el número de variables", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }    
        //Actualizar etiqueta de la función (miniterminosNoImportaLabel)
        if (minitermino_nuevo) {
            StringBuilder sb = new StringBuilder();
            sb.append(miniterminosNoImportaStr);
            String comaEspacio = ", ";
            if (sb.length() != 0) { //No es el primer minitérmino a añadir
                sb.append(comaEspacio);
                sb.append(miniterminoNoImporta);
            } else { //Si la longitud es 0, es el primer minitérmino a añadir
                sb.append(miniterminoNoImporta);
            }

            miniterminosNoImportaStr = sb.toString();
            this.miniterminosNoImportaLabel.setText(miniterminosNoImportaStr);
        }
        
        this.miniterminoNoImportaText.setText(null);
    }//GEN-LAST:event_AnadirMiniterminoNoImportaButtonActionPerformed

    private void AnadirMiniterimoImportaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnadirMiniterimoImportaButtonActionPerformed

        //Crear minitérmino y añadirlo a la lista
        int miniterminoImporta;
        boolean minitermino_nuevo = false;
        limite = (int) (Math.pow(2,Miniterminov3.n_variables) - 1);
        int limite2 = limite + 1;
        Miniterminov3 minitermino1;

        try { //Excepción para que el usuario introduzca dato correcto (en este caso entero).
            miniterminoImporta = Integer.parseInt(this.miniterminoImportaText.getText()); //Minitermino entero introducido por el usuario
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un número entero", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        
        try {
        minitermino1 = new Miniterminov3(miniterminoImporta, false); //Creamos el objeto minitermino ¡CAMBIAR CON TRUE/FALSE EN FUNCION IMPORTA NO IMPORTA!
        if(listaTerminosEntrada.contains(minitermino1)){
            JOptionPane.showMessageDialog(this, "El minitérmino " + miniterminoImporta + " ya está incluído en la función");
        } else {
            listaTerminosEntrada.add(minitermino1);
            minitermino_nuevo = true;
        }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un minitérmino inferior a " + limite2 + " o aumente el número de variables", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //Actualizar etiqueta de la función (miniterminosImportaLabel)
        if(minitermino_nuevo) { //Si el minitérmino es nuevo (no existía ya antes, se actualiza la etiqueta).
        StringBuilder sb = new StringBuilder();
        sb.append(miniterminosImportaStr);
        String comaEspacio = ", ";
        if (sb.length() != 0) { //No es el primer minitérmino a añadir
            sb.append(comaEspacio);
            sb.append(miniterminoImporta);
        } else { //Si la longitud es 0, es el primer minitérmino a añadir
            sb.append(miniterminoImporta);
        }
        
        miniterminosImportaStr = sb.toString();
        this.miniterminosImportaLabel.setText(miniterminosImportaStr);
        }
        this.miniterminoImportaText.setText(null); //Borro el número insertado para que el usuario vuelva a poder insertar otro si lo desea.
    }//GEN-LAST:event_AnadirMiniterimoImportaButtonActionPerformed

    private void borrarMFButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarMFButtonActionPerformed

        //Borrar la solución que aparece de la ejecución anterior
        solucion1MFPanel.setVisible(false);
        for (int i = 0; i < 6; i++) {
            solucion1MFPanel.getComponent(i).setVisible(false);
        }
        solucion2MFPanel.setVisible(false);
        for (int i = 0; i < 6; i++) {
            solucion2MFPanel.getComponent(i).setVisible(false);
        }
        solucion3MFPanel.setVisible(false);
        for (int i = 0; i < 6; i++) {
            solucion3MFPanel.getComponent(i).setVisible(false);
        }
        
        listaTerminosEntradaMF.clear();
        listaTerminosEntradaMF1.clear();
        listaTerminosEntradaMF2.clear();
        listaTerminosEntradaMF3.clear();
        listaTerminosEntradaMF4.clear();
        listaTerminosEntradaMF5.clear();
        listaTerminosEntradaMF6.clear();

        miniterminosImportaMF1Str = "";
        miniterminosImportaMF2Str = "";
        miniterminosImportaMF3Str = "";
        miniterminosImportaMF4Str = "";
        miniterminosImportaMF5Str = "";
        miniterminosImportaMF6Str = "";

        this.miniterminosImporta1Label.setText(miniterminosImportaMF1Str);
        this.miniterminosImporta2Label.setText(miniterminosImportaMF2Str);
        this.miniterminosImporta3Label.setText(miniterminosImportaMF3Str);
        this.miniterminosImporta4Label.setText(miniterminosImportaMF4Str);
        this.miniterminosImporta5Label.setText(miniterminosImportaMF5Str);
        this.miniterminosImporta6Label.setText(miniterminosImportaMF6Str);

        miniterminosNoImportaMF1Str = "";
        miniterminosNoImportaMF2Str = "";
        miniterminosNoImportaMF3Str = "";
        miniterminosNoImportaMF4Str = "";
        miniterminosNoImportaMF5Str = "";
        miniterminosNoImportaMF6Str = "";

        this.miniterminosNoImporta1Label.setText(miniterminosNoImportaMF1Str);
        this.miniterminosNoImporta2Label.setText(miniterminosNoImportaMF2Str);
        this.miniterminosNoImporta3Label.setText(miniterminosNoImportaMF3Str);
        this.miniterminosNoImporta4Label.setText(miniterminosNoImportaMF4Str);
        this.miniterminosNoImporta5Label.setText(miniterminosNoImportaMF5Str);
        this.miniterminosNoImporta6Label.setText(miniterminosNoImportaMF6Str);
    }//GEN-LAST:event_borrarMFButtonActionPerformed

    private void simplificarMFButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simplificarMFButtonActionPerformed
        Tablav3 formula1 = new Tablav3(listaTerminosEntradaMF);
        List<List<Miniterminov3>> vector;

        System.out.println("Lista terminos originales");
        System.out.println(formula1.listaTerminos);

        vector = formula1.ordenarTabla();
        formula1.generarListaImplicantesPrimosMulti(vector);

        System.out.println("Lista Implicantes Primos");
        System.out.println(formula1.listaImplicantesPrimos);

        System.out.println("Actualizo listaFila y listaColumna, por ahora solo listaColumna");
        formula1.generarTablaCoberturaMulti();

        System.out.println("Aquí deberían aparecer solo elementos que faltan por ser implicados.");
        System.out.println(formula1.listaColumna);

        System.out.println("vector de Soluciones no redundantes");
        formula1.generarVectorSolucionesMulti();

        for (List<Miniterminov3> solucion : formula1.vectorSoluciones) {
            System.out.println(solucion);
        }

        System.out.println("vector de Soluciones con menor coste");
        formula1.generaSolucionesMenorCosteMulti();

        formula1.actualizaSoluciones(); //Actualiza el atributo solucion (vector booleano) de cada minitérmino solución.
        
        List<String> solucionLiteral = new ArrayList<String>();
        for (List<Miniterminov3> solucionMenorCoste : formula1.vectorSolucionesMenorCoste) {
            System.out.println(solucionMenorCoste);
            solucionLiteral = Tablav3.convertirSolucionALiteralMF(solucionMenorCoste);
            System.out.println(solucionLiteral);
            System.out.println(solucionLiteral.size());
        }

        int n_soluciones1 = formula1.vectorSolucionesMenorCoste.size();
        int n_funciones1 = Miniterminov3.n_funciones;
        
        List<JPanel> listaJPanelSoluciones = new ArrayList<JPanel>(); //Lista de JPanels con los 3 paneles soluciones
        listaJPanelSoluciones.add(solucion1MFPanel);
        listaJPanelSoluciones.add(solucion2MFPanel);
        listaJPanelSoluciones.add(solucion3MFPanel);
        
        //Debemos mostrar tantos paneles de esta lista como soluciones haya (n_soluciones1 contiene el número de soluciones).
        String str1 = " = ";
        for (int i = 0; i < n_soluciones1; i++) { //Tantas iteraciones como n_soluciones exista
            JPanel panelActual = listaJPanelSoluciones.get(i);
            panelActual.setVisible(true);
            /*Para cada panelActual obtengo la listaSolución formula1.vectorSolucionesMenorCoste.get(i) y llamo a la función para obtener
            ArrayList<String> donde el elemento i de esa lista es la solución en literal de la Fi*/
            List<String> listaSolucionLiteral = Tablav3.convertirSolucionALiteralMF(formula1.vectorSolucionesMenorCoste.get(i));
            int idFinal = 5 - n_funciones1;
            int k=0; //Índice k con el mismo número de iteraciones que el índice j (k se incrementa de 1 en 1 mientras que j se decrementa de 1 en 1).
            JLabel etiquetaActual;
            for (int j = 5; j > idFinal; j--) { //Tantas iteraciones como n_funciones exista
                StringBuilder sb = new StringBuilder();
                sb.append('F'); sb.append(k+1); sb.append(str1); sb.append(listaSolucionLiteral.get(k));
                String solucionStr = sb.toString();
                etiquetaActual = (JLabel) panelActual.getComponent(j);
                etiquetaActual.setText(solucionStr);
                panelActual.getComponent(j).setVisible(true);
                k=k+1;
            }
        }
        
        

    }//GEN-LAST:event_simplificarMFButtonActionPerformed

    private void AnadirMiniterminoNoImporta6ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnadirMiniterminoNoImporta6ButtonActionPerformed
        //Crear minitérmino y añadirlo a la lista
        int miniterminoNoImporta;
        boolean minitermino_nuevo = false;
        limite = (int) (Math.pow(2, Miniterminov3.n_variables) - 1);
        int limite2 = limite + 1;
        Miniterminov3 minitermino1;
        Miniterminov3 minitermino2;
        boolean[] etiqueta = new boolean[Miniterminov3.n_funciones];
        etiqueta[5] = true;
        boolean[] vnoImporta = new boolean[Miniterminov3.n_funciones];
        vnoImporta[5] = true;

        try { //Excepción para que el usuario introduzca dato correcto (en este caso entero).
            miniterminoNoImporta = Integer.parseInt(this.miniterminoNoImporta6Text.getText()); //Minitermino entero introducido por el usuario
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un número entero", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            minitermino1 = new Miniterminov3(miniterminoNoImporta, etiqueta, vnoImporta); //Creamos el objeto minitermino ¡CAMBIAR CON TRUE/FALSE EN FUNCION IMPORTA NO IMPORTA!
            if (listaTerminosEntradaMF6.contains(minitermino1)) {
                JOptionPane.showMessageDialog(this, "El minitérmino " + miniterminoNoImporta + " ya está incluído en la función");
            } else if (listaTerminosEntradaMF.contains(minitermino1)) { //Si lo contiene, no tengo que crear un nuevo minitérmino, simplemente configurar su etiqueta.
                minitermino2 = listaTerminosEntradaMF.get(listaTerminosEntradaMF.indexOf(minitermino1)); //Obtengo el minitérmino que ya existía en la función
                minitermino2.etiqueta[5] = true;
                minitermino2.solucion[5] = true;
                minitermino2.vnoImporta[5] = true;
                minitermino_nuevo = true;
                listaTerminosEntradaMF6.add(minitermino1);
            } else { //Si no ha sido añadido ni en la propia función ni en ninguna otra función, entonces ahora sí se añade a la lista.
                listaTerminosEntradaMF.add(minitermino1);
                listaTerminosEntradaMF6.add(minitermino1);
                minitermino_nuevo = true;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un minitérmino inferior a " + limite2 + " o aumente el número de variables", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Actualizar etiqueta de la función (miniterminosImportaLabel)
        if (minitermino_nuevo) { //Si el minitérmino es nuevo (no existía ya antes, se actualiza la etiqueta).
            StringBuilder sb = new StringBuilder();
            sb.append(miniterminosNoImportaMF6Str);
            String comaEspacio = ", ";
            if (sb.length() != 0) { //No es el primer minitérmino a añadir
                sb.append(comaEspacio);
                sb.append(miniterminoNoImporta);
            } else { //Si la longitud es 0, es el primer minitérmino a añadir
                sb.append(miniterminoNoImporta);
            }

            miniterminosNoImportaMF6Str = sb.toString();
            this.miniterminosNoImporta6Label.setText(miniterminosNoImportaMF6Str);
        }
        this.miniterminoNoImporta6Text.setText(null); //Borro el número insertado para que el usuario vuelva a poder insertar otro si lo desea.
    }//GEN-LAST:event_AnadirMiniterminoNoImporta6ButtonActionPerformed

    private void AnadirMiniterminoImporta6ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnadirMiniterminoImporta6ButtonActionPerformed
        //Crear minitérmino y añadirlo a la lista
        int miniterminoImporta;
        boolean minitermino_nuevo = false;
        limite = (int) (Math.pow(2, Miniterminov3.n_variables) - 1);
        int limite2 = limite + 1;
        Miniterminov3 minitermino1;
        Miniterminov3 minitermino2;
        boolean[] etiqueta = new boolean[Miniterminov3.n_funciones];
        etiqueta[5] = true;
        boolean[] vnoImporta = new boolean[Miniterminov3.n_funciones];

        try { //Excepción para que el usuario introduzca dato correcto (en este caso entero).
            miniterminoImporta = Integer.parseInt(this.miniterminoImporta6Text.getText()); //Minitermino entero introducido por el usuario
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un número entero", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            minitermino1 = new Miniterminov3(miniterminoImporta, etiqueta, vnoImporta); //Creamos el objeto minitermino ¡CAMBIAR CON TRUE/FALSE EN FUNCION IMPORTA NO IMPORTA!
            if (listaTerminosEntradaMF6.contains(minitermino1)) {
                JOptionPane.showMessageDialog(this, "El minitérmino " + miniterminoImporta + " ya está incluído en la función");
            } else if (listaTerminosEntradaMF.contains(minitermino1)) { //Si lo contiene, no tengo que crear un nuevo minitérmino, simplemente configurar su etiqueta.
                minitermino2 = listaTerminosEntradaMF.get(listaTerminosEntradaMF.indexOf(minitermino1)); //Obtengo el minitérmino que ya existía en la función
                minitermino2.etiqueta[5] = true;
                minitermino2.solucion[5] = true;
                minitermino_nuevo = true;
                listaTerminosEntradaMF6.add(minitermino1);
            } else { //Si no ha sido añadido ni en la propia función ni en ninguna otra función, entonces ahora sí se añade a la lista.
                listaTerminosEntradaMF.add(minitermino1);
                listaTerminosEntradaMF6.add(minitermino1);
                minitermino_nuevo = true;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un minitérmino inferior a " + limite2 + " o aumente el número de variables", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Actualizar etiqueta de la función (miniterminosImportaLabel)
        if (minitermino_nuevo) { //Si el minitérmino es nuevo (no existía ya antes, se actualiza la etiqueta).
            StringBuilder sb = new StringBuilder();
            sb.append(miniterminosImportaMF6Str);
            String comaEspacio = ", ";
            if (sb.length() != 0) { //No es el primer minitérmino a añadir
                sb.append(comaEspacio);
                sb.append(miniterminoImporta);
            } else { //Si la longitud es 0, es el primer minitérmino a añadir
                sb.append(miniterminoImporta);
            }

            miniterminosImportaMF6Str = sb.toString();
            this.miniterminosImporta6Label.setText(miniterminosImportaMF6Str);
        }
        this.miniterminoImporta6Text.setText(null); //Borro el número insertado para que el usuario vuelva a poder insertar otro si lo desea.
    }//GEN-LAST:event_AnadirMiniterminoImporta6ButtonActionPerformed

    private void AnadirMiniterminoNoImporta5ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnadirMiniterminoNoImporta5ButtonActionPerformed
        //Crear minitérmino y añadirlo a la lista
        int miniterminoNoImporta;
        boolean minitermino_nuevo = false;
        limite = (int) (Math.pow(2, Miniterminov3.n_variables) - 1);
        int limite2 = limite + 1;
        Miniterminov3 minitermino1;
        Miniterminov3 minitermino2;
        boolean[] etiqueta = new boolean[Miniterminov3.n_funciones];
        etiqueta[4] = true;
        boolean[] vnoImporta = new boolean[Miniterminov3.n_funciones];
        vnoImporta[4] = true;

        try { //Excepción para que el usuario introduzca dato correcto (en este caso entero).
            miniterminoNoImporta = Integer.parseInt(this.miniterminoNoImporta5Text.getText()); //Minitermino entero introducido por el usuario
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un número entero", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            minitermino1 = new Miniterminov3(miniterminoNoImporta, etiqueta, vnoImporta); //Creamos el objeto minitermino ¡CAMBIAR CON TRUE/FALSE EN FUNCION IMPORTA NO IMPORTA!
            if (listaTerminosEntradaMF5.contains(minitermino1)) {
                JOptionPane.showMessageDialog(this, "El minitérmino " + miniterminoNoImporta + " ya está incluído en la función");
            } else if (listaTerminosEntradaMF.contains(minitermino1)) { //Si lo contiene, no tengo que crear un nuevo minitérmino, simplemente configurar su etiqueta.
                minitermino2 = listaTerminosEntradaMF.get(listaTerminosEntradaMF.indexOf(minitermino1)); //Obtengo el minitérmino que ya existía en la función
                minitermino2.etiqueta[4] = true;
                minitermino2.solucion[4] = true;
                minitermino2.vnoImporta[4] = true;
                minitermino_nuevo = true;
                listaTerminosEntradaMF5.add(minitermino1);
            } else { //Si no ha sido añadido ni en la propia función ni en ninguna otra función, entonces ahora sí se añade a la lista.
                listaTerminosEntradaMF.add(minitermino1);
                listaTerminosEntradaMF5.add(minitermino1);
                minitermino_nuevo = true;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un minitérmino inferior a " + limite2 + " o aumente el número de variables", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Actualizar etiqueta de la función (miniterminosImportaLabel)
        if (minitermino_nuevo) { //Si el minitérmino es nuevo (no existía ya antes, se actualiza la etiqueta).
            StringBuilder sb = new StringBuilder();
            sb.append(miniterminosNoImportaMF5Str);
            String comaEspacio = ", ";
            if (sb.length() != 0) { //No es el primer minitérmino a añadir
                sb.append(comaEspacio);
                sb.append(miniterminoNoImporta);
            } else { //Si la longitud es 0, es el primer minitérmino a añadir
                sb.append(miniterminoNoImporta);
            }

            miniterminosNoImportaMF5Str = sb.toString();
            this.miniterminosNoImporta5Label.setText(miniterminosNoImportaMF5Str);
        }
        this.miniterminoNoImporta5Text.setText(null); //Borro el número insertado para que el usuario vuelva a poder insertar otro si lo desea.
    }//GEN-LAST:event_AnadirMiniterminoNoImporta5ButtonActionPerformed

    private void AnadirMiniterminoImporta5ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnadirMiniterminoImporta5ButtonActionPerformed
        //Crear minitérmino y añadirlo a la lista
        int miniterminoImporta;
        boolean minitermino_nuevo = false;
        limite = (int) (Math.pow(2, Miniterminov3.n_variables) - 1);
        int limite2 = limite + 1;
        Miniterminov3 minitermino1;
        Miniterminov3 minitermino2;
        boolean[] etiqueta = new boolean[Miniterminov3.n_funciones];
        etiqueta[4] = true;
        boolean[] vnoImporta = new boolean[Miniterminov3.n_funciones];

        try { //Excepción para que el usuario introduzca dato correcto (en este caso entero).
            miniterminoImporta = Integer.parseInt(this.miniterminoImporta5Text.getText()); //Minitermino entero introducido por el usuario
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un número entero", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            minitermino1 = new Miniterminov3(miniterminoImporta, etiqueta, vnoImporta); //Creamos el objeto minitermino ¡CAMBIAR CON TRUE/FALSE EN FUNCION IMPORTA NO IMPORTA!
            if (listaTerminosEntradaMF5.contains(minitermino1)) {
                JOptionPane.showMessageDialog(this, "El minitérmino " + miniterminoImporta + " ya está incluído en la función");
            } else if (listaTerminosEntradaMF.contains(minitermino1)) { //Si lo contiene, no tengo que crear un nuevo minitérmino, simplemente configurar su etiqueta.
                minitermino2 = listaTerminosEntradaMF.get(listaTerminosEntradaMF.indexOf(minitermino1)); //Obtengo el minitérmino que ya existía en la función
                minitermino2.etiqueta[4] = true;
                minitermino2.solucion[4] = true;
                minitermino_nuevo = true;
                listaTerminosEntradaMF5.add(minitermino1);
            } else { //Si no ha sido añadido ni en la propia función ni en ninguna otra función, entonces ahora sí se añade a la lista.
                listaTerminosEntradaMF.add(minitermino1);
                listaTerminosEntradaMF5.add(minitermino1);
                minitermino_nuevo = true;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un minitérmino inferior a " + limite2 + " o aumente el número de variables", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Actualizar etiqueta de la función (miniterminosImportaLabel)
        if (minitermino_nuevo) { //Si el minitérmino es nuevo (no existía ya antes, se actualiza la etiqueta).
            StringBuilder sb = new StringBuilder();
            sb.append(miniterminosImportaMF5Str);
            String comaEspacio = ", ";
            if (sb.length() != 0) { //No es el primer minitérmino a añadir
                sb.append(comaEspacio);
                sb.append(miniterminoImporta);
            } else { //Si la longitud es 0, es el primer minitérmino a añadir
                sb.append(miniterminoImporta);
            }

            miniterminosImportaMF5Str = sb.toString();
            this.miniterminosImporta5Label.setText(miniterminosImportaMF5Str);
        }
        this.miniterminoImporta5Text.setText(null); //Borro el número insertado para que el usuario vuelva a poder insertar otro si lo desea.
    }//GEN-LAST:event_AnadirMiniterminoImporta5ButtonActionPerformed

    private void AnadirMiniterminoNoImporta4ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnadirMiniterminoNoImporta4ButtonActionPerformed
        //Crear minitérmino y añadirlo a la lista
        int miniterminoNoImporta;
        boolean minitermino_nuevo = false;
        limite = (int) (Math.pow(2, Miniterminov3.n_variables) - 1);
        int limite2 = limite + 1;
        Miniterminov3 minitermino1;
        Miniterminov3 minitermino2;
        boolean[] etiqueta = new boolean[Miniterminov3.n_funciones];
        etiqueta[3] = true;
        boolean[] vnoImporta = new boolean[Miniterminov3.n_funciones];
        vnoImporta[3] = true;

        try { //Excepción para que el usuario introduzca dato correcto (en este caso entero).
            miniterminoNoImporta = Integer.parseInt(this.miniterminoNoImporta4Text.getText()); //Minitermino entero introducido por el usuario
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un número entero", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            minitermino1 = new Miniterminov3(miniterminoNoImporta, etiqueta, vnoImporta); //Creamos el objeto minitermino ¡CAMBIAR CON TRUE/FALSE EN FUNCION IMPORTA NO IMPORTA!
            if (listaTerminosEntradaMF4.contains(minitermino1)) {
                JOptionPane.showMessageDialog(this, "El minitérmino " + miniterminoNoImporta + " ya está incluído en la función");
            } else if (listaTerminosEntradaMF.contains(minitermino1)) { //Si lo contiene, no tengo que crear un nuevo minitérmino, simplemente configurar su etiqueta.
                minitermino2 = listaTerminosEntradaMF.get(listaTerminosEntradaMF.indexOf(minitermino1)); //Obtengo el minitérmino que ya existía en la función
                minitermino2.etiqueta[3] = true;
                minitermino2.solucion[3] = true;
                minitermino2.vnoImporta[3] = true;
                minitermino_nuevo = true;
                listaTerminosEntradaMF4.add(minitermino1);
            } else { //Si no ha sido añadido ni en la propia función ni en ninguna otra función, entonces ahora sí se añade a la lista.
                listaTerminosEntradaMF.add(minitermino1);
                listaTerminosEntradaMF4.add(minitermino1);
                minitermino_nuevo = true;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un minitérmino inferior a " + limite2 + " o aumente el número de variables", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Actualizar etiqueta de la función (miniterminosImportaLabel)
        if (minitermino_nuevo) { //Si el minitérmino es nuevo (no existía ya antes, se actualiza la etiqueta).
            StringBuilder sb = new StringBuilder();
            sb.append(miniterminosNoImportaMF4Str);
            String comaEspacio = ", ";
            if (sb.length() != 0) { //No es el primer minitérmino a añadir
                sb.append(comaEspacio);
                sb.append(miniterminoNoImporta);
            } else { //Si la longitud es 0, es el primer minitérmino a añadir
                sb.append(miniterminoNoImporta);
            }

            miniterminosNoImportaMF4Str = sb.toString();
            this.miniterminosNoImporta4Label.setText(miniterminosNoImportaMF4Str);
        }
        this.miniterminoNoImporta4Text.setText(null); //Borro el número insertado para que el usuario vuelva a poder insertar otro si lo desea.
    }//GEN-LAST:event_AnadirMiniterminoNoImporta4ButtonActionPerformed

    private void AnadirMiniterminoImporta4ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnadirMiniterminoImporta4ButtonActionPerformed
        //Crear minitérmino y añadirlo a la lista
        int miniterminoImporta;
        boolean minitermino_nuevo = false;
        limite = (int) (Math.pow(2, Miniterminov3.n_variables) - 1);
        int limite2 = limite + 1;
        Miniterminov3 minitermino1;
        Miniterminov3 minitermino2;
        boolean[] etiqueta = new boolean[Miniterminov3.n_funciones];
        etiqueta[3] = true;
        boolean[] vnoImporta = new boolean[Miniterminov3.n_funciones];

        try { //Excepción para que el usuario introduzca dato correcto (en este caso entero).
            miniterminoImporta = Integer.parseInt(this.miniterminoImporta4Text.getText()); //Minitermino entero introducido por el usuario
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un número entero", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            minitermino1 = new Miniterminov3(miniterminoImporta, etiqueta, vnoImporta); //Creamos el objeto minitermino ¡CAMBIAR CON TRUE/FALSE EN FUNCION IMPORTA NO IMPORTA!
            if (listaTerminosEntradaMF4.contains(minitermino1)) {
                JOptionPane.showMessageDialog(this, "El minitérmino " + miniterminoImporta + " ya está incluído en la función");
            } else if (listaTerminosEntradaMF.contains(minitermino1)) { //Si lo contiene, no tengo que crear un nuevo minitérmino, simplemente configurar su etiqueta.
                minitermino2 = listaTerminosEntradaMF.get(listaTerminosEntradaMF.indexOf(minitermino1)); //Obtengo el minitérmino que ya existía en la función
                minitermino2.etiqueta[3] = true;
                minitermino2.solucion[3] = true;
                minitermino_nuevo = true;
                listaTerminosEntradaMF4.add(minitermino1);
            } else { //Si no ha sido añadido ni en la propia función ni en ninguna otra función, entonces ahora sí se añade a la lista.
                listaTerminosEntradaMF.add(minitermino1);
                listaTerminosEntradaMF4.add(minitermino1);
                minitermino_nuevo = true;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un minitérmino inferior a " + limite2 + " o aumente el número de variables", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Actualizar etiqueta de la función (miniterminosImportaLabel)
        if (minitermino_nuevo) { //Si el minitérmino es nuevo (no existía ya antes, se actualiza la etiqueta).
            StringBuilder sb = new StringBuilder();
            sb.append(miniterminosImportaMF4Str);
            String comaEspacio = ", ";
            if (sb.length() != 0) { //No es el primer minitérmino a añadir
                sb.append(comaEspacio);
                sb.append(miniterminoImporta);
            } else { //Si la longitud es 0, es el primer minitérmino a añadir
                sb.append(miniterminoImporta);
            }

            miniterminosImportaMF4Str = sb.toString();
            this.miniterminosImporta4Label.setText(miniterminosImportaMF4Str);
        }
        this.miniterminoImporta4Text.setText(null); //Borro el número insertado para que el usuario vuelva a poder insertar otro si lo desea.
    }//GEN-LAST:event_AnadirMiniterminoImporta4ButtonActionPerformed

    private void numVariablesMFComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_numVariablesMFComboBoxItemStateChanged

        borrarMFButton.doClick();

        Object elementoSeleccionado = this.numVariablesMFComboBox.getSelectedItem(); //Obtenemos el elemento seleccionado del ComboBox
        String elementoSeleccionadoStr = elementoSeleccionado.toString(); //Lo convertimos a String
        int elementoSeleccionadoInt = Integer.parseInt(elementoSeleccionadoStr); //Convertimos a entero
        Miniterminov3.n_variables = (byte) elementoSeleccionadoInt;
    }//GEN-LAST:event_numVariablesMFComboBoxItemStateChanged

    private void numFuncionesMFComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_numFuncionesMFComboBoxItemStateChanged

        borrarMFButton.doClick();

        Object elementoSeleccionado = this.numFuncionesMFComboBox.getSelectedItem(); //Obtenemos el elemento seleccionado del ComboBox
        String elementoSeleccionadoStr = elementoSeleccionado.toString(); //Lo convertimos a String
        int elementoSeleccionadoInt = Integer.parseInt(elementoSeleccionadoStr); //Convertimos a entero
        Miniterminov3.n_funciones = (byte) elementoSeleccionadoInt;

        if(elementoSeleccionadoInt == 2) {
            this.funcion1MFPanel.setVisible(true);
            this.funcion2MFPanel.setVisible(true);
            this.funcion3MFPanel.setVisible(false);
            this.funcion4MFPanel.setVisible(false);
            this.funcion5MFPanel.setVisible(false);
            this.funcion6MFPanel.setVisible(false);
        } else if(elementoSeleccionadoInt == 3) {
            this.funcion1MFPanel.setVisible(true);
            this.funcion2MFPanel.setVisible(true);
            this.funcion3MFPanel.setVisible(true);
            this.funcion4MFPanel.setVisible(false);
            this.funcion5MFPanel.setVisible(false);
            this.funcion6MFPanel.setVisible(false);
        } else if(elementoSeleccionadoInt == 4) {
            this.funcion1MFPanel.setVisible(true);
            this.funcion2MFPanel.setVisible(true);
            this.funcion3MFPanel.setVisible(true);
            this.funcion4MFPanel.setVisible(true);
            this.funcion5MFPanel.setVisible(false);
            this.funcion6MFPanel.setVisible(false);
        } else if(elementoSeleccionadoInt == 5) {
            this.funcion1MFPanel.setVisible(true);
            this.funcion2MFPanel.setVisible(true);
            this.funcion3MFPanel.setVisible(true);
            this.funcion4MFPanel.setVisible(true);
            this.funcion5MFPanel.setVisible(true);
            this.funcion6MFPanel.setVisible(false);
        } else {
            this.funcion1MFPanel.setVisible(true);
            this.funcion2MFPanel.setVisible(true);
            this.funcion3MFPanel.setVisible(true);
            this.funcion4MFPanel.setVisible(true);
            this.funcion5MFPanel.setVisible(true);
            this.funcion6MFPanel.setVisible(true);
        }
    }//GEN-LAST:event_numFuncionesMFComboBoxItemStateChanged

    private void AnadirMiniterminoNoImporta3ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnadirMiniterminoNoImporta3ButtonActionPerformed
        //Crear minitérmino y añadirlo a la lista
        int miniterminoNoImporta;
        boolean minitermino_nuevo = false;
        limite = (int) (Math.pow(2, Miniterminov3.n_variables) - 1);
        int limite2 = limite + 1;
        Miniterminov3 minitermino1;
        Miniterminov3 minitermino2;
        boolean[] etiqueta = new boolean[Miniterminov3.n_funciones];
        etiqueta[2] = true;
        boolean[] vnoImporta = new boolean[Miniterminov3.n_funciones];
        vnoImporta[2] = true;

        try { //Excepción para que el usuario introduzca dato correcto (en este caso entero).
            miniterminoNoImporta = Integer.parseInt(this.miniterminoNoImporta3Text.getText()); //Minitermino entero introducido por el usuario
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un número entero", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            minitermino1 = new Miniterminov3(miniterminoNoImporta, etiqueta, vnoImporta); //Creamos el objeto minitermino ¡CAMBIAR CON TRUE/FALSE EN FUNCION IMPORTA NO IMPORTA!
            if (listaTerminosEntradaMF3.contains(minitermino1)) {
                JOptionPane.showMessageDialog(this, "El minitérmino " + miniterminoNoImporta + " ya está incluído en la función");
            } else if (listaTerminosEntradaMF.contains(minitermino1)) { //Si lo contiene, no tengo que crear un nuevo minitérmino, simplemente configurar su etiqueta.
                minitermino2 = listaTerminosEntradaMF.get(listaTerminosEntradaMF.indexOf(minitermino1)); //Obtengo el minitérmino que ya existía en la función
                minitermino2.etiqueta[2] = true;
                minitermino2.solucion[2] = true;
                minitermino2.vnoImporta[2] = true;
                minitermino_nuevo = true;
                listaTerminosEntradaMF3.add(minitermino1);
            } else { //Si no ha sido añadido ni en la propia función ni en ninguna otra función, entonces ahora sí se añade a la lista.
                listaTerminosEntradaMF.add(minitermino1);
                listaTerminosEntradaMF3.add(minitermino1);
                minitermino_nuevo = true;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un minitérmino inferior a " + limite2 + " o aumente el número de variables", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Actualizar etiqueta de la función (miniterminosImportaLabel)
        if (minitermino_nuevo) { //Si el minitérmino es nuevo (no existía ya antes, se actualiza la etiqueta).
            StringBuilder sb = new StringBuilder();
            sb.append(miniterminosNoImportaMF3Str);
            String comaEspacio = ", ";
            if (sb.length() != 0) { //No es el primer minitérmino a añadir
                sb.append(comaEspacio);
                sb.append(miniterminoNoImporta);
            } else { //Si la longitud es 0, es el primer minitérmino a añadir
                sb.append(miniterminoNoImporta);
            }

            miniterminosNoImportaMF3Str = sb.toString();
            this.miniterminosNoImporta3Label.setText(miniterminosNoImportaMF3Str);
        }
        this.miniterminoNoImporta3Text.setText(null); //Borro el número insertado para que el usuario vuelva a poder insertar otro si lo desea.
    }//GEN-LAST:event_AnadirMiniterminoNoImporta3ButtonActionPerformed

    private void AnadirMiniterminoImporta3ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnadirMiniterminoImporta3ButtonActionPerformed
        //Crear minitérmino y añadirlo a la lista
        int miniterminoImporta;
        boolean minitermino_nuevo = false;
        limite = (int) (Math.pow(2, Miniterminov3.n_variables) - 1);
        int limite2 = limite + 1;
        Miniterminov3 minitermino1;
        Miniterminov3 minitermino2;
        boolean[] etiqueta = new boolean[Miniterminov3.n_funciones];
        etiqueta[2] = true;
        boolean[] vnoImporta = new boolean[Miniterminov3.n_funciones];

        try { //Excepción para que el usuario introduzca dato correcto (en este caso entero).
            miniterminoImporta = Integer.parseInt(this.miniterminoImporta3Text.getText()); //Minitermino entero introducido por el usuario
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un número entero", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            minitermino1 = new Miniterminov3(miniterminoImporta, etiqueta, vnoImporta); //Creamos el objeto minitermino ¡CAMBIAR CON TRUE/FALSE EN FUNCION IMPORTA NO IMPORTA!
            if (listaTerminosEntradaMF3.contains(minitermino1)) {
                JOptionPane.showMessageDialog(this, "El minitérmino " + miniterminoImporta + " ya está incluído en la función");
            } else if (listaTerminosEntradaMF.contains(minitermino1)) { //Si lo contiene, no tengo que crear un nuevo minitérmino, simplemente configurar su etiqueta.
                minitermino2 = listaTerminosEntradaMF.get(listaTerminosEntradaMF.indexOf(minitermino1)); //Obtengo el minitérmino que ya existía en la función
                minitermino2.etiqueta[2] = true;
                minitermino2.solucion[2] = true;
                minitermino_nuevo = true;
                listaTerminosEntradaMF3.add(minitermino1);
            } else { //Si no ha sido añadido ni en la propia función ni en ninguna otra función, entonces ahora sí se añade a la lista.
                listaTerminosEntradaMF.add(minitermino1);
                listaTerminosEntradaMF3.add(minitermino1);
                minitermino_nuevo = true;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un minitérmino inferior a " + limite2 + " o aumente el número de variables", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Actualizar etiqueta de la función (miniterminosImportaLabel)
        if (minitermino_nuevo) { //Si el minitérmino es nuevo (no existía ya antes, se actualiza la etiqueta).
            StringBuilder sb = new StringBuilder();
            sb.append(miniterminosImportaMF3Str);
            String comaEspacio = ", ";
            if (sb.length() != 0) { //No es el primer minitérmino a añadir
                sb.append(comaEspacio);
                sb.append(miniterminoImporta);
            } else { //Si la longitud es 0, es el primer minitérmino a añadir
                sb.append(miniterminoImporta);
            }

            miniterminosImportaMF3Str = sb.toString();
            this.miniterminosImporta3Label.setText(miniterminosImportaMF3Str);
        }
        this.miniterminoImporta3Text.setText(null); //Borro el número insertado para que el usuario vuelva a poder insertar otro si lo desea.
    }//GEN-LAST:event_AnadirMiniterminoImporta3ButtonActionPerformed

    private void AnadirMiniterminoNoImporta2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnadirMiniterminoNoImporta2ButtonActionPerformed
        //Crear minitérmino y añadirlo a la lista
        int miniterminoNoImporta;
        boolean minitermino_nuevo = false;
        limite = (int) (Math.pow(2, Miniterminov3.n_variables) - 1);
        int limite2 = limite + 1;
        Miniterminov3 minitermino1;
        Miniterminov3 minitermino2;
        boolean[] etiqueta = new boolean[Miniterminov3.n_funciones];
        etiqueta[1] = true;
        boolean[] vnoImporta = new boolean[Miniterminov3.n_funciones];
        vnoImporta[1] = true;

        try { //Excepción para que el usuario introduzca dato correcto (en este caso entero).
            miniterminoNoImporta = Integer.parseInt(this.miniterminoNoImporta2Text.getText()); //Minitermino entero introducido por el usuario
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un número entero", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            minitermino1 = new Miniterminov3(miniterminoNoImporta, etiqueta, vnoImporta); //Creamos el objeto minitermino ¡CAMBIAR CON TRUE/FALSE EN FUNCION IMPORTA NO IMPORTA!
            if (listaTerminosEntradaMF2.contains(minitermino1)) {
                JOptionPane.showMessageDialog(this, "El minitérmino " + miniterminoNoImporta + " ya está incluído en la función");
            } else if (listaTerminosEntradaMF.contains(minitermino1)) { //Si lo contiene, no tengo que crear un nuevo minitérmino, simplemente configurar su etiqueta.
                minitermino2 = listaTerminosEntradaMF.get(listaTerminosEntradaMF.indexOf(minitermino1)); //Obtengo el minitérmino que ya existía en la función
                minitermino2.etiqueta[1] = true;
                minitermino2.solucion[1] = true;
                minitermino2.vnoImporta[1] = true;
                minitermino_nuevo = true;
                listaTerminosEntradaMF2.add(minitermino1);
            } else { //Si no ha sido añadido ni en la propia función ni en ninguna otra función, entonces ahora sí se añade a la lista.
                listaTerminosEntradaMF.add(minitermino1);
                listaTerminosEntradaMF2.add(minitermino1);
                minitermino_nuevo = true;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un minitérmino inferior a " + limite2 + " o aumente el número de variables", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Actualizar etiqueta de la función (miniterminosImportaLabel)
        if (minitermino_nuevo) { //Si el minitérmino es nuevo (no existía ya antes, se actualiza la etiqueta).
            StringBuilder sb = new StringBuilder();
            sb.append(miniterminosNoImportaMF2Str);
            String comaEspacio = ", ";
            if (sb.length() != 0) { //No es el primer minitérmino a añadir
                sb.append(comaEspacio);
                sb.append(miniterminoNoImporta);
            } else { //Si la longitud es 0, es el primer minitérmino a añadir
                sb.append(miniterminoNoImporta);
            }

            miniterminosNoImportaMF2Str = sb.toString();
            this.miniterminosNoImporta2Label.setText(miniterminosNoImportaMF2Str);
        }
        this.miniterminoNoImporta2Text.setText(null); //Borro el número insertado para que el usuario vuelva a poder insertar otro si lo desea.
    }//GEN-LAST:event_AnadirMiniterminoNoImporta2ButtonActionPerformed

    private void AnadirMiniterminoImporta2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnadirMiniterminoImporta2ButtonActionPerformed

        //Crear minitérmino y añadirlo a la lista
        int miniterminoImporta;
        boolean minitermino_nuevo = false;
        limite = (int) (Math.pow(2, Miniterminov3.n_variables) - 1);
        int limite2 = limite + 1;
        Miniterminov3 minitermino1;
        Miniterminov3 minitermino2;
        boolean[] etiqueta = new boolean[Miniterminov3.n_funciones];
        etiqueta[1] = true;
        boolean[] vnoImporta = new boolean[Miniterminov3.n_funciones];

        try { //Excepción para que el usuario introduzca dato correcto (en este caso entero).
            miniterminoImporta = Integer.parseInt(this.miniterminoImporta2Text.getText()); //Minitermino entero introducido por el usuario
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un número entero", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            minitermino1 = new Miniterminov3(miniterminoImporta, etiqueta, vnoImporta); //Creamos el objeto minitermino ¡CAMBIAR CON TRUE/FALSE EN FUNCION IMPORTA NO IMPORTA!
            if (listaTerminosEntradaMF2.contains(minitermino1)) {
                JOptionPane.showMessageDialog(this, "El minitérmino " + miniterminoImporta + " ya está incluído en la función");
            } else if (listaTerminosEntradaMF.contains(minitermino1)) { //Si lo contiene, no tengo que crear un nuevo minitérmino, simplemente configurar su etiqueta.
                minitermino2 = listaTerminosEntradaMF.get(listaTerminosEntradaMF.indexOf(minitermino1)); //Obtengo el minitérmino que ya existía en la función
                minitermino2.etiqueta[1] = true;
                minitermino2.solucion[1] = true;
                minitermino_nuevo = true;
                listaTerminosEntradaMF2.add(minitermino1);
            } else { //Si no ha sido añadido ni en la propia función ni en ninguna otra función, entonces ahora sí se añade a la lista.
                listaTerminosEntradaMF.add(minitermino1);
                listaTerminosEntradaMF2.add(minitermino1);
                minitermino_nuevo = true;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un minitérmino inferior a " + limite2 + " o aumente el número de variables", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Actualizar etiqueta de la función (miniterminosImportaLabel)
        if (minitermino_nuevo) { //Si el minitérmino es nuevo (no existía ya antes, se actualiza la etiqueta).
            StringBuilder sb = new StringBuilder();
            sb.append(miniterminosImportaMF2Str);
            String comaEspacio = ", ";
            if (sb.length() != 0) { //No es el primer minitérmino a añadir
                sb.append(comaEspacio);
                sb.append(miniterminoImporta);
            } else { //Si la longitud es 0, es el primer minitérmino a añadir
                sb.append(miniterminoImporta);
            }

            miniterminosImportaMF2Str = sb.toString();
            this.miniterminosImporta2Label.setText(miniterminosImportaMF2Str);
        }
        this.miniterminoImporta2Text.setText(null); //Borro el número insertado para que el usuario vuelva a poder insertar otro si lo desea.
    }//GEN-LAST:event_AnadirMiniterminoImporta2ButtonActionPerformed

    private void AnadirMiniterminoNoImporta1ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnadirMiniterminoNoImporta1ButtonActionPerformed
        //Crear minitérmino y añadirlo a la lista
        int miniterminoNoImporta;
        boolean minitermino_nuevo = false;
        limite = (int) (Math.pow(2, Miniterminov3.n_variables) - 1);
        int limite2 = limite + 1;
        Miniterminov3 minitermino1;
        Miniterminov3 minitermino2;
        boolean[] etiqueta = new boolean[Miniterminov3.n_funciones];
        etiqueta[0] = true;
        boolean[] vnoImporta = new boolean[Miniterminov3.n_funciones];
        vnoImporta[0] = true;

        try { //Excepción para que el usuario introduzca dato correcto (en este caso entero).
            miniterminoNoImporta = Integer.parseInt(this.miniterminoNoImporta1Text.getText()); //Minitermino entero introducido por el usuario
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un número entero", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            minitermino1 = new Miniterminov3(miniterminoNoImporta, etiqueta, vnoImporta); //Creamos el objeto minitermino ¡CAMBIAR CON TRUE/FALSE EN FUNCION IMPORTA NO IMPORTA!
            if (listaTerminosEntradaMF1.contains(minitermino1)) {
                JOptionPane.showMessageDialog(this, "El minitérmino " + miniterminoNoImporta + " ya está incluído en la función");
            } else if (listaTerminosEntradaMF.contains(minitermino1)) { //Si lo contiene, no tengo que crear un nuevo minitérmino, simplemente configurar su etiqueta.
                minitermino2 = listaTerminosEntradaMF.get(listaTerminosEntradaMF.indexOf(minitermino1)); //Obtengo el minitérmino que ya existía en la función
                minitermino2.etiqueta[0] = true;
                minitermino2.solucion[0] = true;
                minitermino2.vnoImporta[0] = true;
                minitermino_nuevo = true;
                listaTerminosEntradaMF1.add(minitermino1);
            } else { //Si no ha sido añadido ni en la propia función ni en ninguna otra función, entonces ahora sí se añade a la lista.
                listaTerminosEntradaMF.add(minitermino1);
                listaTerminosEntradaMF1.add(minitermino1);
                minitermino_nuevo = true;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un minitérmino inferior a " + limite2 + " o aumente el número de variables", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Actualizar etiqueta de la función (miniterminosImportaLabel)
        if (minitermino_nuevo) { //Si el minitérmino es nuevo (no existía ya antes, se actualiza la etiqueta).
            StringBuilder sb = new StringBuilder();
            sb.append(miniterminosNoImportaMF1Str);
            String comaEspacio = ", ";
            if (sb.length() != 0) { //No es el primer minitérmino a añadir
                sb.append(comaEspacio);
                sb.append(miniterminoNoImporta);
            } else { //Si la longitud es 0, es el primer minitérmino a añadir
                sb.append(miniterminoNoImporta);
            }

            miniterminosNoImportaMF1Str = sb.toString();
            this.miniterminosNoImporta1Label.setText(miniterminosNoImportaMF1Str);
        }
        this.miniterminoNoImporta1Text.setText(null); //Borro el número insertado para que el usuario vuelva a poder insertar otro si lo desea.
    }//GEN-LAST:event_AnadirMiniterminoNoImporta1ButtonActionPerformed

    private void AnadirMiniterminoImporta1ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnadirMiniterminoImporta1ButtonActionPerformed

        //Crear minitérmino y añadirlo a la lista
        int miniterminoImporta;
        boolean minitermino_nuevo = false;
        limite = (int) (Math.pow(2,Miniterminov3.n_variables) - 1);
        int limite2 = limite + 1;
        Miniterminov3 minitermino1;
        Miniterminov3 minitermino2;
        boolean[] etiqueta = new boolean[Miniterminov3.n_funciones];
        etiqueta[0] = true;
        boolean[] vnoImporta = new boolean[Miniterminov3.n_funciones];

        try { //Excepción para que el usuario introduzca dato correcto (en este caso entero).
            miniterminoImporta = Integer.parseInt(this.miniterminoImporta1Text.getText()); //Minitermino entero introducido por el usuario
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un número entero", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            minitermino1 = new Miniterminov3(miniterminoImporta, etiqueta, vnoImporta); //Creamos el objeto minitermino ¡CAMBIAR CON TRUE/FALSE EN FUNCION IMPORTA NO IMPORTA!
            if(listaTerminosEntradaMF1.contains(minitermino1)){
                JOptionPane.showMessageDialog(this, "El minitérmino " + miniterminoImporta + " ya está incluído en la función");
            } else if(listaTerminosEntradaMF.contains(minitermino1)) { //Si lo contiene, no tengo que crear un nuevo minitérmino, simplemente configurar su etiqueta.
                minitermino2 = listaTerminosEntradaMF.get(listaTerminosEntradaMF.indexOf(minitermino1)); //Obtengo el minitérmino que ya existía en la función
                minitermino2.etiqueta[0] = true;
                minitermino2.solucion[0] = true;
                minitermino_nuevo = true;
                listaTerminosEntradaMF1.add(minitermino1);
            } else { //Si no ha sido añadido ni en la propia función ni en ninguna otra función, entonces ahora sí se añade a la lista.
                listaTerminosEntradaMF.add(minitermino1);
                listaTerminosEntradaMF1.add(minitermino1);
                minitermino_nuevo = true;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Inserte un minitérmino inferior a " + limite2 + " o aumente el número de variables", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Actualizar etiqueta de la función (miniterminosImportaLabel)
        if(minitermino_nuevo) { //Si el minitérmino es nuevo (no existía ya antes, se actualiza la etiqueta).
            StringBuilder sb = new StringBuilder();
            sb.append(miniterminosImportaMF1Str);
            String comaEspacio = ", ";
            if (sb.length() != 0) { //No es el primer minitérmino a añadir
                sb.append(comaEspacio);
                sb.append(miniterminoImporta);
            } else { //Si la longitud es 0, es el primer minitérmino a añadir
                sb.append(miniterminoImporta);
            }

            miniterminosImportaMF1Str = sb.toString();
            this.miniterminosImporta1Label.setText(miniterminosImportaMF1Str);
        }
        this.miniterminoImporta1Text.setText(null); //Borro el número insertado para que el usuario vuelva a poder insertar otro si lo desea.
    }//GEN-LAST:event_AnadirMiniterminoImporta1ButtonActionPerformed

    //Declaración de variables no gráficas para Una función
    List<Miniterminov3> listaTerminosEntrada = new ArrayList<Miniterminov3>();
    List<JLabel> listaEtiquetas = new ArrayList<JLabel>();
    String miniterminosImportaStr = "";
    String miniterminosNoImportaStr = "";
    int limite;
    
    //Declaración de variables no gráficas para Multifunciones
    List<JPanel> listaJPanels = new ArrayList<JPanel>();
    List<Miniterminov3> listaTerminosEntradaMF1 = new ArrayList<Miniterminov3>();
    List<Miniterminov3> listaTerminosEntradaMF2 = new ArrayList<Miniterminov3>();
    List<Miniterminov3> listaTerminosEntradaMF3 = new ArrayList<Miniterminov3>();
    List<Miniterminov3> listaTerminosEntradaMF4 = new ArrayList<Miniterminov3>();
    List<Miniterminov3> listaTerminosEntradaMF5 = new ArrayList<Miniterminov3>();
    List<Miniterminov3> listaTerminosEntradaMF6 = new ArrayList<Miniterminov3>();
    List<Miniterminov3> listaTerminosEntradaMF = new ArrayList<Miniterminov3>();
    String miniterminosImportaMF1Str = "";
    String miniterminosNoImportaMF1Str = "";
    String miniterminosImportaMF2Str = "";
    String miniterminosNoImportaMF2Str = "";
    String miniterminosImportaMF3Str = "";
    String miniterminosNoImportaMF3Str = "";
    String miniterminosImportaMF4Str = "";
    String miniterminosNoImportaMF4Str = "";
    String miniterminosImportaMF5Str = "";
    String miniterminosNoImportaMF5Str = "";
    String miniterminosImportaMF6Str = "";
    String miniterminosNoImportaMF6Str = "";
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuineForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuineForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuineForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuineForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuineForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AnadirMiniterimoImportaButton;
    private javax.swing.JButton AnadirMiniterminoImporta1Button;
    private javax.swing.JButton AnadirMiniterminoImporta2Button;
    private javax.swing.JButton AnadirMiniterminoImporta3Button;
    private javax.swing.JButton AnadirMiniterminoImporta4Button;
    private javax.swing.JButton AnadirMiniterminoImporta5Button;
    private javax.swing.JButton AnadirMiniterminoImporta6Button;
    private javax.swing.JButton AnadirMiniterminoNoImporta1Button;
    private javax.swing.JButton AnadirMiniterminoNoImporta2Button;
    private javax.swing.JButton AnadirMiniterminoNoImporta3Button;
    private javax.swing.JButton AnadirMiniterminoNoImporta4Button;
    private javax.swing.JButton AnadirMiniterminoNoImporta5Button;
    private javax.swing.JButton AnadirMiniterminoNoImporta6Button;
    private javax.swing.JButton AnadirMiniterminoNoImportaButton;
    private javax.swing.JComboBox NumVariablesComboBox;
    private javax.swing.JButton borrarFuncionButton;
    private javax.swing.JButton borrarMFButton;
    private javax.swing.JLabel funcion1MFLabelNo;
    private javax.swing.JLabel funcion1MFLabelSi;
    private javax.swing.JPanel funcion1MFPanel;
    private javax.swing.JLabel funcion2MFLabelNo;
    private javax.swing.JLabel funcion2MFLabelSi;
    private javax.swing.JPanel funcion2MFPanel;
    private javax.swing.JLabel funcion3MFLabelNo;
    private javax.swing.JLabel funcion3MFLabelSi;
    private javax.swing.JPanel funcion3MFPanel;
    private javax.swing.JLabel funcion4MFLabelNo;
    private javax.swing.JLabel funcion4MFLabelSi;
    private javax.swing.JPanel funcion4MFPanel;
    private javax.swing.JLabel funcion5MFLabelNo;
    private javax.swing.JLabel funcion5MFLabelSi;
    private javax.swing.JPanel funcion5MFPanel;
    private javax.swing.JLabel funcion6MFLabelNo;
    private javax.swing.JLabel funcion6MFLabelSi;
    private javax.swing.JPanel funcion6MFPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField miniterminoImporta1Text;
    private javax.swing.JTextField miniterminoImporta2Text;
    private javax.swing.JTextField miniterminoImporta3Text;
    private javax.swing.JTextField miniterminoImporta4Text;
    private javax.swing.JTextField miniterminoImporta5Text;
    private javax.swing.JTextField miniterminoImporta6Text;
    private javax.swing.JTextField miniterminoImportaText;
    private javax.swing.JTextField miniterminoNoImporta1Text;
    private javax.swing.JTextField miniterminoNoImporta2Text;
    private javax.swing.JTextField miniterminoNoImporta3Text;
    private javax.swing.JTextField miniterminoNoImporta4Text;
    private javax.swing.JTextField miniterminoNoImporta5Text;
    private javax.swing.JTextField miniterminoNoImporta6Text;
    private javax.swing.JTextField miniterminoNoImportaText;
    private javax.swing.JLabel miniterminosImporta1Label;
    private javax.swing.JLabel miniterminosImporta2Label;
    private javax.swing.JLabel miniterminosImporta3Label;
    private javax.swing.JLabel miniterminosImporta4Label;
    private javax.swing.JLabel miniterminosImporta5Label;
    private javax.swing.JLabel miniterminosImporta6Label;
    private javax.swing.JLabel miniterminosImportaLabel;
    private javax.swing.JLabel miniterminosNoImporta1Label;
    private javax.swing.JLabel miniterminosNoImporta2Label;
    private javax.swing.JLabel miniterminosNoImporta3Label;
    private javax.swing.JLabel miniterminosNoImporta4Label;
    private javax.swing.JLabel miniterminosNoImporta5Label;
    private javax.swing.JLabel miniterminosNoImporta6Label;
    private javax.swing.JLabel miniterminosNoImportaLabel;
    private javax.swing.JComboBox numFuncionesMFComboBox;
    private javax.swing.JComboBox numVariablesMFComboBox;
    private javax.swing.JButton simplificarFuncionButton;
    private javax.swing.JButton simplificarMFButton;
    private javax.swing.JLabel solucion1F1Label;
    private javax.swing.JLabel solucion1F2Label;
    private javax.swing.JLabel solucion1F3Label;
    private javax.swing.JLabel solucion1F4Label;
    private javax.swing.JLabel solucion1F5Label;
    private javax.swing.JLabel solucion1F6Label;
    private javax.swing.JLabel solucion1Label;
    private javax.swing.JPanel solucion1MFPanel;
    private javax.swing.JLabel solucion2F1Label;
    private javax.swing.JLabel solucion2F2Label;
    private javax.swing.JLabel solucion2F3Label;
    private javax.swing.JLabel solucion2F4Label;
    private javax.swing.JLabel solucion2F5Label;
    private javax.swing.JLabel solucion2F6Label;
    private javax.swing.JLabel solucion2Label;
    private javax.swing.JPanel solucion2MFPanel;
    private javax.swing.JLabel solucion3F1Label;
    private javax.swing.JLabel solucion3F2Label;
    private javax.swing.JLabel solucion3F3Label;
    private javax.swing.JLabel solucion3F4Label;
    private javax.swing.JLabel solucion3F5Label;
    private javax.swing.JLabel solucion3F6Label;
    private javax.swing.JLabel solucion3Label;
    private javax.swing.JPanel solucion3MFPanel;
    private javax.swing.JLabel solucion4Label;
    private javax.swing.JLabel solucion5Label;
    // End of variables declaration//GEN-END:variables
    //Declaración de variables para MultiFunción
    
}
